jamesdanielmarrsritchey: Using PHP, write a function which generates an image, of a specified resolution, in a choice of JPEG or PNG format, using random pixel colours. The function should return TRUE if it successfully creates an image, and FALSE if it fails.

GitHub Copilot: ```php
function generateRandomImage($width, $height, $format) {
    // Check if the specified format is supported
    if (!in_array($format, ['jpeg', 'png'])) {
        return false;
    }

    // Create a blank image with the specified dimensions
    $image = imagecreatetruecolor($width, $height);
    if (!$image) {
        return false;
    }

    // Populate the image with random pixels
    for ($x = 0; $x < $width; $x++) {
        for ($y = 0; $y < $height; $y++) {
            // Generate a random color
            $color = imagecolorallocate($image, mt_rand(0, 255), mt_rand(0, 255), mt_rand(0, 255));
            // Set the pixel color at (x, y)
            imagesetpixel($image, $x, $y, $color);
        }
    }

    // Generate the image file based on the specified format
    $result = false;
    switch ($format) {
        case 'jpeg':
            $result = imagejpeg($image, null, 100); // Output directly to the browser
            break;
        case 'png':
            $result = imagepng($image); // Output directly to the browser
            break;
    }

    // Free up memory
    imagedestroy($image);

    return $result;
}
```

jamesdanielmarrsritchey: The function shouldn't display the image in a browser, it should write it to a file, in a specified path.

GitHub Copilot: ```php
function generateRandomImageToFile($width, $height, $format, $filePath) {
    // Check if the specified format is supported
    if (!in_array($format, ['jpeg', 'png'])) {
        return false;
    }

    // Create a blank image with the specified dimensions
    $image = imagecreatetruecolor($width, $height);
    if (!$image) {
        return false;
    }

    // Populate the image with random pixels
    for ($x = 0; $x < $width; $x++) {
        for ($y = 0; $y < $height; $y++) {
            // Generate a random color
            $color = imagecolorallocate($image, mt_rand(0, 255), mt_rand(0, 255), mt_rand(0, 255));
            // Set the pixel color at (x, y)
            imagesetpixel($image, $x, $y, $color);
        }
    }

    // Generate the image file based on the specified format and save it to the specified path
    $result = false;
    switch ($format) {
        case 'jpeg':
            $result = imagejpeg($image, $filePath, 100); // Save to file
            break;
        case 'png':
            $result = imagepng($image, $filePath); // Save to file
            break;
    }

    // Free up memory
    imagedestroy($image);

    return $result;
}
```

jamesdanielmarrsritchey: provide an example of using this function

GitHub Copilot: ```php
// Example usage of the generateRandomImageToFile function

// Set the desired image dimensions
$width = 800;
$height = 600;

// Choose the image format ('jpeg' or 'png')
$format = 'png';

// Specify the path where the image should be saved
$filePath = '/path/to/your/directory/random_image.png';

// Call the function with the specified parameters
$result = generateRandomImageToFile($width, $height, $format, $filePath);

// Check if the image was successfully created and saved
if ($result) {
    echo "Image successfully created and saved to: " . $filePath;
} else {
    echo "Failed to create the image.";
}
```